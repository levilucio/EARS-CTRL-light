package org.iets3.ears.gxw.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.io.File;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.ArrayList;
import org.fortiss.de.autocode4.gxw.GXWEngine;
import org.fortiss.de.autocode4.gxw.spec.GXWspec;
import org.fortiss.de.autocode4.gxw.engine.ConstraintBuilder;
import java.io.PrintWriter;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import org.fortiss.de.autocode4.gxw.twoqbf.TwoQBF;
import org.fortiss.de.autocode4.gxw.engine.UnknownVariableAssignment;
import javax.swing.JOptionPane;
import org.fortiss.de.autocode4.gxw.codegen.LustreCodeGenerator;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class RequirementChunk__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, "org.iets3.ears.gxw.structure.RequirementChunk");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Void> writeToFile_id3ghj88fUYVW = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("writeToFile").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3ghj88fUYVW").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<String> systhesizeSolverOutput_id3ghj88fVJYt = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("systhesizeSolverOutput").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3ghj88fVJYt").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(File.class, ""));
  public static final SMethod<Void> ConvertReqToFormulae_id4MKUcPlT3vX = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("ConvertReqToFormulae").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4MKUcPlT3vX").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<String> GetSolverOutputString_id4MKUcPmjdeS = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("GetSolverOutputString").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4MKUcPmjdeS").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(File.class, ""));
  public static final SMethod<List<SNode>> getTriggersFromReqsWithResponse_id5bowr9XmAJs = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getTriggersFromReqsWithResponse").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5bowr9XmAJs").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<List<SNode>> getComponentsInResponseFormula_id5bowr9Y85Q$ = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getComponentsInResponseFormula").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5bowr9Y85Q$").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<List<SNode>> getComponentNames_id5bowr9Ycu3H = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getComponentNames").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5bowr9Ycu3H").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(writeToFile_id3ghj88fUYVW, systhesizeSolverOutput_id3ghj88fVJYt, ConvertReqToFormulae_id4MKUcPlT3vX, GetSolverOutputString_id4MKUcPmjdeS, getTriggersFromReqsWithResponse_id5bowr9XmAJs, getComponentsInResponseFormula_id5bowr9Y85Q$, getComponentNames_id5bowr9Ycu3H);

  private static void ___init___(@NotNull SNode __thisNode__) {

  }

  protected static Logger LOG = LogManager.getLogger(RequirementChunk__BehaviorDescriptor.class);
  /*package*/ static void writeToFile_id3ghj88fUYVW(@NotNull SNode __thisNode__, String filePath, String content) {
    File file = new File(filePath);

    try {
      if (file.exists()) {
        file.delete();
      }
      FileWriter fileWriter = new FileWriter(file.getAbsoluteFile());
      BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

      bufferedWriter.write(content);
      bufferedWriter.close();


    } catch (IOException ex) {
      if (LOG.isInfoEnabled()) {
        LOG.info("", ex);
      }
    }


  }
  /*package*/ static String systhesizeSolverOutput_id3ghj88fVJYt(@NotNull SNode __thisNode__, File file) {
    ArrayList<String> variableList = new ArrayList<String>();


    try {

      GXWEngine engine = new GXWEngine(false);

      GXWspec problem = new GXWspec(file);

      ConstraintBuilder builder = new ConstraintBuilder(problem);

      PrintWriter writer;
      writer = new PrintWriter("tmp.qdimacs", "UTF-8");

      if (LOG.isInfoEnabled()) {
        LOG.info("before");
      }


      builder.produceConstraint();

      writer.write(builder.qbfCstr.constraint.toString());
      writer.close();

      variableList = builder.qbfCstr.cnfVarList;
      engine.resolutionBlockPin = builder.resolutionBlockPin;

      if (LOG.isInfoEnabled()) {
        LOG.info("Use native Java 2QBF solver");
      }

      // defining variables 

      ByteArrayOutputStream baOutputStream = new ByteArrayOutputStream();
      PrintStream printStream = new PrintStream(baOutputStream);
      PrintStream old = System.out;
      System.setOut(printStream);

      TwoQBF solver = new TwoQBF();
      String[] argsnew = new String[1];
      argsnew[0] = "tmp.qdimacs";
      solver.run(argsnew);

      System.out.flush();
      System.setOut(old);

      UnknownVariableAssignment unknownVA = new UnknownVariableAssignment();

      String result = baOutputStream.toString();
      if (LOG.isInfoEnabled()) {
        LOG.info("the result string has " + result);
      }
      if (result.contains("UNSAT")) {

        if (problem.realizable == GXWspec.NO_SOLUTION_2QBF) {
          if (LOG.isInfoEnabled()) {
            LOG.info("Inconsistent result between synthesis and spec (the spec should be not realizable): " + file.getName());
          }
          JOptionPane.showMessageDialog(null, "Inconsistent result between synthesis and spec (the spec should be not realizable): " + file.getName());

          return "Inconsistent result between synthesis and spec (the spec should be not realizable): " + file.getName();

        }

        if (LOG.isInfoEnabled()) {
          LOG.info("Parameter assignment for resolution blocks found! ");
        }
        String[] res = result.split("[\\r\\n]+");
        for (String r : res) {
          if (r.trim().startsWith("UNSAT for the following universal variable assignment:")) {
            String assignments = r.trim().substring("UNSAT for the following universal variable assignment:".length()).trim();
            if (LOG.isInfoEnabled()) {
              LOG.info(" assignments!" + assignments);
            }
            if (!(assignments.trim().equals(""))) {
              String[] assigns = assignments.split(",");
              for (String assign : assigns) {
                boolean isSetToFalse = false;
                if (assign.trim().startsWith("-")) {
                  isSetToFalse = true;
                  assign = assign.trim().substring(1);
                }

                String varName = variableList.get(Integer.parseInt(assign)).substring("Res".length(), variableList.get(Integer.parseInt(assign)).indexOf("."));

                if (isSetToFalse) {
                  unknownVA.variableAssignment.put(varName, "false");
                } else {
                  unknownVA.variableAssignment.put(varName, "true");
                }
              }
            }
            break;
          }
        }

      } else {
        if (problem.realizable == GXWspec.REALIZABLE) {
          if (LOG.isInfoEnabled()) {
            LOG.info(" ERROR: Inconsistent result between synthesis and spec (the spec should be realizable): " + file.getName());
          }
          JOptionPane.showMessageDialog(null, " ERROR: Inconsistent result between synthesis and spec (the spec should be realizable): " + file.getName());

          return " ERROR: Inconsistent result between synthesis and spec (the spec should be realizable): " + file.getName();


        }

        if (LOG.isInfoEnabled()) {
          LOG.info("Parameter assignment for resolution blocks unavailable ");
        }
        JOptionPane.showMessageDialog(null, "Error: Parameter assignment for resolution blocks unavailable (the spec is not realizable)");

        return " ";
      }




      LustreCodeGenerator pcGen = new LustreCodeGenerator(problem);
      // generate models 
      if (LOG.isInfoEnabled()) {
        LOG.info("now reading the files");
      }
      pcGen.generateModelDescription(builder.ctrlBuilder.sdfCtrl);
      if (LOG.isInfoEnabled()) {
        LOG.info("now sending the sdf to generate model");
      }
      return " ";


    } catch (Exception ex) {
      if (LOG.isInfoEnabled()) {
        LOG.info("the exception is ..", ex);
      }

      return "sorry it does not work ";
    }

  }
  /*package*/ static void ConvertReqToFormulae_id4MKUcPlT3vX(@NotNull SNode __thisNode__, String fileName) {

    try {
      String inputFilePath = fileName;


      File inputFile = new File(inputFilePath);
      if (inputFile.exists()) {
        inputFile.delete();
      }
      FileWriter fileWriter = new FileWriter(inputFile.getAbsoluteFile());
      BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
      if (LOG.isInfoEnabled()) {
        LOG.info("" + System.getProperty("user.dir"));
      }

      Map<SNode, String> triggerMap = MapSequence.fromMap(new LinkedHashMap<SNode, String>(16, (float) 0.75, false));
      Map<SNode, String> systemResponseMap = MapSequence.fromMap(new HashMap<SNode, String>());
      for (SNode trigger : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, 0x29245ddc2083503cL, "glossary")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ff4L, "listOfTriggers")))) {
        MapSequence.fromMap(triggerMap).put(trigger, SPropertyOperations.getString(trigger, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")).replace(" ", ""));
      }

      for (SNode systemResponse : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, 0x29245ddc2083503cL, "glossary")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ffbL, "listOfResponses")))) {
        MapSequence.fromMap(systemResponseMap).put(systemResponse, (SPropertyOperations.getString(SLinkOperations.getTarget(systemResponse, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + SPropertyOperations.getString(systemResponse, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711686L, "response"))).replace(" ", ""));
      }

      int count = 0;


      bufferedWriter.write("INPUT ");
      for (IMapping<SNode, String> trigger : MapSequence.fromMap(triggerMap)) {
        bufferedWriter.write(trigger.value());
        if (MapSequence.fromMap(triggerMap).last().value() != trigger.value()) {
          bufferedWriter.write(", ");
        }
      }

      bufferedWriter.write("\n");

      bufferedWriter.write("OUTPUT ");
      for (IMapping<SNode, String> response : MapSequence.fromMap(systemResponseMap)) {
        bufferedWriter.write(response.value());
        if (MapSequence.fromMap(systemResponseMap).last().value() != response.value()) {
          bufferedWriter.write(", ");
        }
      }
      bufferedWriter.write("\n");



      bufferedWriter.close();
    } catch (Exception ex) {
      System.out.println("The exception is " + ex);
    }
  }
  /*package*/ static String GetSolverOutputString_id4MKUcPmjdeS(@NotNull SNode __thisNode__, File file) {

    ArrayList<String> variableList = new ArrayList<String>();


    try {

      GXWEngine engine = new GXWEngine(false);

      GXWspec problem = new GXWspec(file);

      ConstraintBuilder builder = new ConstraintBuilder(problem);

      PrintWriter writer;
      writer = new PrintWriter("tmp.qdimacs", "UTF-8");

      if (LOG.isInfoEnabled()) {
        LOG.info("before");
      }

      builder.produceConstraint();

      writer.write(builder.qbfCstr.constraint.toString());
      writer.close();

      variableList = builder.qbfCstr.cnfVarList;
      engine.resolutionBlockPin = builder.resolutionBlockPin;

      if (LOG.isInfoEnabled()) {
        LOG.info("Use native Java 2QBF solver");
      }

      // defining variables 

      ByteArrayOutputStream baOutputStream = new ByteArrayOutputStream();
      PrintStream printStream = new PrintStream(baOutputStream);
      PrintStream old = System.out;
      System.setOut(printStream);

      TwoQBF solver = new TwoQBF();
      String[] argsnew = new String[1];
      argsnew[0] = "tmp.qdimacs";
      solver.run(argsnew);

      System.out.flush();
      System.setOut(old);

      UnknownVariableAssignment unknownVA = new UnknownVariableAssignment();

      String result = baOutputStream.toString();
      if (LOG.isInfoEnabled()) {
        LOG.info("the result string has " + result);
      }
      if (result.contains("UNSAT")) {

        if (problem.realizable == GXWspec.NO_SOLUTION_2QBF) {
          if (LOG.isInfoEnabled()) {
            LOG.info("Inconsistent result between synthesis and spec (the spec should be not realizable): " + file.getName());
          }
          JOptionPane.showMessageDialog(null, "Inconsistent result between synthesis and spec (the spec should be not realizable): " + file.getName());

          return "Error: No solution for the given spec!( No solution 2QBF) " + file.getName();

        }

        if (LOG.isInfoEnabled()) {
          LOG.info("Parameter assignment for resolution blocks found! ");
        }
        String[] res = result.split("[\\r\\n]+");
        for (String r : res) {
          if (r.trim().startsWith("UNSAT for the following universal variable assignment:")) {
            String assignments = r.trim().substring("UNSAT for the following universal variable assignment:".length()).trim();
            if (LOG.isInfoEnabled()) {
              LOG.info(" assignments!" + assignments);
            }
            if (!(assignments.trim().equals(""))) {
              String[] assigns = assignments.split(",");
              for (String assign : assigns) {
                boolean isSetToFalse = false;
                if (assign.trim().startsWith("-")) {
                  isSetToFalse = true;
                  assign = assign.trim().substring(1);
                }

                String varName = variableList.get(Integer.parseInt(assign)).substring("Res".length(), variableList.get(Integer.parseInt(assign)).indexOf("."));

                if (isSetToFalse) {
                  unknownVA.variableAssignment.put(varName, "false");
                } else {
                  unknownVA.variableAssignment.put(varName, "true");
                }
              }
            }
            break;
          }
        }
      } else {
        if (problem.realizable == GXWspec.REALIZABLE) {
          if (LOG.isInfoEnabled()) {
            LOG.info(" The spec should be realizable): " + file.getName());
          }
          JOptionPane.showMessageDialog(null, " ERROR: Inconsistent result between synthesis and spec (the spec should be realizable): " + file.getName());

          return "Success! the spec is realizable" + file.getName();
        }

        if (LOG.isInfoEnabled()) {
          LOG.info("Parameter assignment for resolution blocks unavailable ");
        }
        JOptionPane.showMessageDialog(null, "Error: Parameter assignment for resolution blocks unavailable (the spec is not realizable)");

        return "Error: Spec not realizable ";
      }
    } catch (Exception ex) {
      if (LOG.isInfoEnabled()) {
        LOG.info("the exception is ..", ex);
      }

      return "Error: Incomplete requirements ";
    }

    return " ";

  }
  /*package*/ static List<SNode> getTriggersFromReqsWithResponse_id5bowr9XmAJs(@NotNull SNode __thisNode__, SNode response, SNode currentReq) {
    // get all triggers from requirements ahead of the current requirement that have responses that share components 
    // with the response in the parameter of the method 

    List<SNode> responsesToSearch = RequirementChunk__BehaviorDescriptor.getComponentsInResponseFormula_id5bowr9Y85Q$.invoke(__thisNode__, response);
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());

    for (SNode req : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, 0x5d97a5a8692b865cL, "requirements")))) {
      if (req != currentReq) {
        if (SNodeOperations.isInstanceOf(req, MetaAdapterFactory.getInterfaceConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d6L, "org.iets3.ears.gxw.structure.AbstractEventDrivenReq"))) {
          List<SNode> responsesInRequirement = RequirementChunk__BehaviorDescriptor.getComponentsInResponseFormula_id5bowr9Y85Q$.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getInterfaceConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d6L, "org.iets3.ears.gxw.structure.AbstractEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d6L, 0x7985bc66bb09e3a9L, "response")));
          List<SNode> componentsInResponsesToSearch = RequirementChunk__BehaviorDescriptor.getComponentNames_id5bowr9Ycu3H.invoke(__thisNode__, responsesToSearch);
          List<SNode> componentsInResponsesInReq = RequirementChunk__BehaviorDescriptor.getComponentNames_id5bowr9Ycu3H.invoke(__thisNode__, responsesInRequirement);

          System.out.println("---------------*--*---------> " + componentsInResponsesToSearch);
          System.out.println("---------------****---------> " + componentsInResponsesInReq);

          if (ListSequence.fromList(componentsInResponsesInReq).intersect(ListSequence.fromList(componentsInResponsesToSearch)).isNotEmpty()) {
            System.out.println("/////// FOUND SOMETHING ////////");
            res.add(SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getInterfaceConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d6L, "org.iets3.ears.gxw.structure.AbstractEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d6L, 0x7985bc66bb09e3a8L, "trigger"))));
            if (SNodeOperations.isInstanceOf(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, "org.iets3.ears.gxw.structure.ComplexEventDrivenReq"))) {
              res.add(SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, "org.iets3.ears.gxw.structure.ComplexEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, 0x12815fbacd831a7aL, "triggerWhile"))));
            }
          }
        }
      }
    }
    return res;
  }
  /*package*/ static List<SNode> getComponentsInResponseFormula_id5bowr9Y85Q$(@NotNull SNode __thisNode__, SNode formula) {
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    if (SNodeOperations.isInstanceOf(formula, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc5L, "org.iets3.ears.gxw.structure.AndFormulaSR"))) {
      ListSequence.fromList(res).addSequence(ListSequence.fromList(RequirementChunk__BehaviorDescriptor.getComponentsInResponseFormula_id5bowr9Y85Q$.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(formula, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc5L, "org.iets3.ears.gxw.structure.AndFormulaSR")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc3L, 0x29245ddc2085f587L, "arg1")))));
      ListSequence.fromList(res).addSequence(ListSequence.fromList(RequirementChunk__BehaviorDescriptor.getComponentsInResponseFormula_id5bowr9Y85Q$.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(formula, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc5L, "org.iets3.ears.gxw.structure.AndFormulaSR")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc3L, 0x29245ddc2085f58eL, "arg2")))));
    } else if (SNodeOperations.isInstanceOf(formula, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc6L, "org.iets3.ears.gxw.structure.OrFormulaSR"))) {
      ListSequence.fromList(res).addSequence(ListSequence.fromList(RequirementChunk__BehaviorDescriptor.getComponentsInResponseFormula_id5bowr9Y85Q$.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(formula, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc5L, "org.iets3.ears.gxw.structure.AndFormulaSR")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc3L, 0x29245ddc2085f587L, "arg1")))));
      ListSequence.fromList(res).addSequence(ListSequence.fromList(RequirementChunk__BehaviorDescriptor.getComponentsInResponseFormula_id5bowr9Y85Q$.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(formula, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc6L, "org.iets3.ears.gxw.structure.OrFormulaSR")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc3L, 0x29245ddc2085f58eL, "arg2")))));
    } else if (SNodeOperations.isInstanceOf(formula, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc7L, "org.iets3.ears.gxw.structure.NotFormulaSR"))) {
      ListSequence.fromList(res).addSequence(ListSequence.fromList(RequirementChunk__BehaviorDescriptor.getComponentsInResponseFormula_id5bowr9Y85Q$.invoke(__thisNode__, SLinkOperations.getTarget(SNodeOperations.cast(formula, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc7L, "org.iets3.ears.gxw.structure.NotFormulaSR")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cc4L, 0x29245ddc2085f59bL, "arg")))));
    } else if (SNodeOperations.isInstanceOf(formula, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x7985bc66bcb081a8L, "org.iets3.ears.gxw.structure.AliasFormulaSR"))) {
      ListSequence.fromList(res).addSequence(ListSequence.fromList(RequirementChunk__BehaviorDescriptor.getComponentsInResponseFormula_id5bowr9Y85Q$.invoke(__thisNode__, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(formula, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x7985bc66bcb081a8L, "org.iets3.ears.gxw.structure.AliasFormulaSR")), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x7985bc66bcb081a8L, 0x7985bc66bcb081a9L, "responseAlias")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x16773e7879d18484L, 0x7985bc66bc7e8322L, "responseFormula")))));
    } else {
      ListSequence.fromList(res).addElement(SLinkOperations.getTarget(SNodeOperations.cast(formula, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cd2L, "org.iets3.ears.gxw.structure.AtomicFormulaSR")), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cd2L, 0x5d97a5a869295cdcL, "atom")));
    }
    return res;
  }
  /*package*/ static List<SNode> getComponentNames_id5bowr9Ycu3H(@NotNull SNode __thisNode__, List<SNode> responses) {
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode response : ListSequence.fromList(responses)) {
      ListSequence.fromList(res).addElement(SLinkOperations.getTarget(response, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")));
    }
    return res;
  }

  /*package*/ RequirementChunk__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        writeToFile_id3ghj88fUYVW(node, (String) parameters[0], (String) parameters[1]);
        return null;
      case 1:
        return (T) ((String) systhesizeSolverOutput_id3ghj88fVJYt(node, (File) parameters[0]));
      case 2:
        ConvertReqToFormulae_id4MKUcPlT3vX(node, (String) parameters[0]);
        return null;
      case 3:
        return (T) ((String) GetSolverOutputString_id4MKUcPmjdeS(node, (File) parameters[0]));
      case 4:
        return (T) ((List<SNode>) getTriggersFromReqsWithResponse_id5bowr9XmAJs(node, (SNode) parameters[0], (SNode) parameters[1]));
      case 5:
        return (T) ((List<SNode>) getComponentsInResponseFormula_id5bowr9Y85Q$(node, (SNode) parameters[0]));
      case 6:
        return (T) ((List<SNode>) getComponentNames_id5bowr9Ycu3H(node, (List<SNode>) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
